#!/usr/bin/env newlisp

(define (get_node_idx node the_map)
  (find node the_map (fn (a b) (= a (b 0))))
)

(define (get_node node the_map)
  (set 'idx (get_node_idx node the_map))
  (if (nil? idx) nil (the_map idx))
)

(define (proc str)
  (define (add_to_map node1 node2)
    (define (add_arc from to)
      (set 'idx (get_node_idx from the_map))
      (if (nil? idx)
        (push (list from (list to)) the_map)
        (if (nil? (find to (the_map idx 1)))
          (push to (the_map idx 1))
        )
      )
    )
    (add_arc node1 node2)
    (add_arc node2 node1)
    node2
  )
  (define (make_moves dx dy)
    (set 'result '())
    (dolist (p pos)
      (set 'np (add_to_map p (list (+ (p 0) dx) (+ (p 1) dy))))
      (if (nil? (find np result)) (push np result))
    )
    result
  )
  (define (add_unique dest src)
    (dolist (el src)
      (if (nil? (find el dest)) (push el dest))
    )
    dest
  )
  (set 'the_map '())
  (set 'begins '(((0 0))))
  (set 'ends '(()))
  (set 'pos (begins 0))
  (dolist (c (explode str))
    (if (= (% $idx 100) 0) (print "\r  Characters read: " $idx))
    (case c
      ("(" (push pos begins) (push '() ends))
      (")"
        (set 'pos (add_unique (pop ends) pos))
        (pop begins)
      )
      ("|"
        (setq (ends 0) (add_unique (ends 0) pos))
        (set 'pos (begins 0))
      )
      ("N" (set 'pos (make_moves 0 -1)))
      ("W" (set 'pos (make_moves -1 0)))
      ("E" (set 'pos (make_moves 1 0)))
      ("S" (set 'pos (make_moves 0 1)))
    )
  )
  (println "\r  Found " (length the_map) " rooms.          ")
  the_map
)

(define (solve title input)
  (println title ":")
  (set 'the_map (proc input))
  (set 'dist -1)
  (set 'visited '((0 0)))
  (set 'last_visited visited)
  (set 'under1k 0)
  (until (empty? last_visited)
    (print "\r  Current dist: " (++ dist))
    (if (= dist 999) (set 'under1k (length visited)))
    (set 'new_visited '())
    (dolist (node last_visited)
      (set 'neighbors ((get_node node the_map) 1))
      (dolist (neighbor neighbors)
        (if
          (nil? (find neighbor visited))
          (begin
            (push neighbor visited)
            (push neighbor new_visited)
          )
        )
      )
    )
    (set 'last_visited new_visited)
  )
  (println)
  (println "\r  Part 1: " dist " ")
  (println "  Part 2: " (if (< dist 1000) 0 (- (length visited) under1k)))
)

(solve "Test" "^WSSEESWWWNW(S|NENNEEEENN(ESSSSW(NWSW|SSEN)|WSWWN(E|WWS(E|SS))))$")

(solve "The real thing" (read-file "day20.in"))

(exit)
